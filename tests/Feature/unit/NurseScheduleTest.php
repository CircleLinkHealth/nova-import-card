<?php

namespace Tests\Feature\unit;

use Carbon\Carbon;
use Tests\Helpers\UserHelpers;
use Tests\TestCase;

class NurseScheduleTest extends TestCase
{
    use UserHelpers;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->nurse = $this->createUser(9, 'care-center');
    }

    public function test_empty_schedule()
    {
        $schedule = $this->nurse->nurseInfo->weeklySchedule();

        $this->assertTrue($schedule->isEmpty());
    }

    public function test_non_empty_schedule()
    {
        $this->nurse->nurseInfo->windows()->create([
            'date'              => Carbon::now()->format('Y-m-d'),
            'day_of_week'       => 2,
            'window_time_start' => '09:00',
            'window_time_end'   => '11:00',
        ]);

        $this->nurse->nurseInfo->windows()->create([
            'date'              => Carbon::now()->format('Y-m-d'),
            'day_of_week'       => 2,
            'window_time_start' => '13:00',
            'window_time_end'   => '22:00',
        ]);

        $this->nurse->nurseInfo->windows()->create([
            'date'              => Carbon::now()->format('Y-m-d'),
            'day_of_week'       => 1,
            'window_time_start' => '09:00',
            'window_time_end'   => '11:00',
        ]);

        $this->nurse->nurseInfo->windows()->create([
            'date'              => Carbon::now()->format('Y-m-d'),
            'day_of_week'       => 7,
            'window_time_start' => '13:00',
            'window_time_end'   => '22:00',
        ]);

        $schedule = $this->nurse->nurseInfo->weeklySchedule();

        //assert 3 days
        $this->assertTrue($schedule->count() == 3);

        //assert 4 windows
        $this->assertTrue($schedule->flatten()->count() == 4);
    }
}
