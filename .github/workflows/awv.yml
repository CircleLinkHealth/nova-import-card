name: Deploy AWV App
on:
  push:
    paths:
      - apps/awv-app/**
jobs:
  deploy:
    defaults:
      run:
        working-directory: apps/awv-app
    name: Deploy
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, 'deploy') }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Check if commit message has [ci skip]
        uses: mstachniuk/ci-skip@v1

      - name: Turnstyle - run workflow only once
        if: ${{ env.CI_SKIP == 'false' }}
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Sentry release - production
        if: ${{ env.CI_SKIP == 'false' && github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy prod') }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: circlelinkhealth
          SENTRY_PROJECT: awv
        with:
          environment: production

      - name: Create Sentry release - staging
        if: ${{ env.CI_SKIP == 'false' && github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'deploy prod') }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: circlelinkhealth
          SENTRY_PROJECT: awv
        with:
          environment: staging

      - name: Copy .env
        if: ${{ env.CI_SKIP == 'false' }}
        run: php -r "copy('.env.githubactions', '.env');"

      - name: Set SSH key for npm install
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PANGRATIOS }}

      - name: Install Composer dependencies
        if: ${{ env.CI_SKIP == 'false' }}
        uses: php-actions/composer@v5
        env:
          COMPOSER_MIRROR_PATH_REPOS: 1
        with:
          version: 1
          php_version: 7.4
          php_extensions: redis zip gd exif imagick opcache intl libxml pdo dom bcmath sockets
          progress: yes
          dev: yes
          args: --classmap-authoritative --no-scripts -d apps/awv-app

      - name: Setup PHP - need this to run vapor deploy
        if: ${{ env.CI_SKIP == 'false' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer:v1
          extensions: redis, zip, gd, exif, imagick, opcache, intl, libxml, pdo, dom, bcmath, sockets
          coverage: none

      - name: Predeploy 1 - Generate app key
        if: ${{ env.CI_SKIP == 'false' }}
        run: php artisan key:generate && php artisan config:clear

      - name: Predeploy 2 - Export .env file to $GITHUB_ENV
        if: ${{ env.CI_SKIP == 'false' }}
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: apps/awv-app/.env

      - name: Create env files to connect to S3 after deployment - production
        if: ${{ env.CI_SKIP == 'false' && github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy prod') }}
        run: |
          echo ENV_TYPE=$ENV_TYPE >> production-deploy-s3.env
          echo APP_NAME=$APP_NAME >> production-deploy-s3.env
          echo S3_SECRETS_BUCKET=$S3_SECRETS_BUCKET >> production-deploy-s3.env
          echo S3_SECRETS_KEY=$S3_SECRETS_KEY >> production-deploy-s3.env
          echo S3_SECRETS_SECRET=$S3_SECRETS_SECRET >> production-deploy-s3.env
          echo S3_SECRETS_REGION=$S3_SECRETS_REGION >> production-deploy-s3.env
        shell: bash
        env:
          ENV_TYPE: production
          APP_NAME: awv
          S3_SECRETS_BUCKET: ${{ secrets.PRODUCTION_S3_SECRETS_BUCKET }}
          S3_SECRETS_KEY: ${{ secrets.PRODUCTION_S3_SECRETS_KEY }}
          S3_SECRETS_SECRET: ${{ secrets.PRODUCTION_S3_SECRETS_SECRET }}
          S3_SECRETS_REGION: ${{ secrets.S3_SECRETS_REGION }}

      - name: Create env files to connect to S3 after deployment - staging and review apps
        if: ${{ env.CI_SKIP == 'false' && !startsWith(github.event.head_commit.message, 'deploy prod') }}
        run: |
          echo ENV_TYPE=$ENV_TYPE >> staging-deploy-s3.env
          echo APP_NAME=$APP_NAME >> staging-deploy-s3.env
          echo S3_SECRETS_BUCKET=$S3_SECRETS_BUCKET >> staging-deploy-s3.env
          echo S3_SECRETS_KEY=$S3_SECRETS_KEY >> staging-deploy-s3.env
          echo S3_SECRETS_SECRET=$S3_SECRETS_SECRET >> staging-deploy-s3.env
          echo S3_SECRETS_REGION=$S3_SECRETS_REGION >> staging-deploy-s3.env
        shell: bash
        env:
          ENV_TYPE: staging
          APP_NAME: awv
          S3_SECRETS_BUCKET: ${{ secrets.STAGING_S3_SECRETS_BUCKET }}
          S3_SECRETS_KEY: ${{ secrets.STAGING_S3_SECRETS_KEY }}
          S3_SECRETS_SECRET: ${{ secrets.STAGING_S3_SECRETS_SECRET }}
          S3_SECRETS_REGION: ${{ secrets.S3_SECRETS_REGION }}

      - name: Set permissions to allow creating env files
        if: ${{ env.CI_SKIP == 'false' }}
        run: sudo chmod -R 777 ./vendor/laravel/vapor-cli/src/BuildProcess

      - name: Deploy - production
        if: ${{ env.CI_SKIP == 'false' && github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy prod') }}
        run: ./vendor/bin/vapor deploy ${{ env.APP_ENV }} ${{ env.ENV_TYPE }} --commit="${{ github.sha }}"
        env:
          VAPOR_API_TOKEN: ${{ secrets.VAPOR_API_TOKEN }}
          ENV_TYPE: production
          APP_ENV: production

      - name: Deploy - staging
        if: ${{ env.CI_SKIP == 'false' && github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'deploy prod') }}
        run: ./vendor/bin/vapor deploy ${{ env.APP_ENV }} ${{ env.ENV_TYPE }} --commit="${{ github.sha }}"
        env:
          VAPOR_API_TOKEN: ${{ secrets.VAPOR_API_TOKEN }}
          ENV_TYPE: staging
          APP_ENV: staging

      - name: Split commit message for review apps
        uses: jungwinter/split@v1
        if: ${{ env.CI_SKIP == 'false' && github.ref != 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy review') }}
        id: split
        with:
          msg: ${{ github.event.head_commit.message }}

      - name: Deploy - review
        if: ${{ env.CI_SKIP == 'false' && github.ref != 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy review') }}
        run: ./vendor/bin/vapor deploy ${{ env.APP_ENV }} ${{ env.ENV_TYPE }} --commit="${{ github.sha }}"
        env:
          VAPOR_API_TOKEN: ${{ secrets.VAPOR_API_TOKEN }}
          ENV_TYPE: staging
          APP_ENV: ${{ steps.split.outputs._2 }}

      - name: Notify Slack - Success (production)
        if: ${{ env.CI_SKIP == 'false' && success() && github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy prod') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: '#39C16C'
          SLACK_TITLE: Deployment successful for AWV app - PRODUCTION
          SLACK_MESSAGE: ðŸš€
          SLACK_USERNAME: kokos
          SLACK_ICON_EMOJI: ':suspect:'

      - name: Notify Slack - Success (staging)
        if: ${{ env.CI_SKIP == 'false' && success() && github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'deploy prod') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: '#39C16C'
          SLACK_TITLE: Deployment successful for AWV app - STAGING
          SLACK_MESSAGE: ðŸš€
          SLACK_USERNAME: kokos
          SLACK_ICON_EMOJI: ':suspect:'

      - name: Notify Slack - Success (review)
        if: ${{ env.CI_SKIP == 'false' && success() && github.ref != 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy review') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: '#39C16C'
          SLACK_TITLE: Deployment successful for AWV app - REVIEW APP (${{ steps.split.outputs._2 }})
          SLACK_MESSAGE: ðŸš€
          SLACK_USERNAME: kokos
          SLACK_ICON_EMOJI: ':suspect:'

      - name: Notify Slack - Failure (production)
        if: ${{ env.CI_SKIP == 'false' && failure() && github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'deploy prod') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: '#ff0033'
          SLACK_TITLE: Deployment failed AWV app - PRODUCTION
          SLACK_MESSAGE: ðŸ’£
          SLACK_USERNAME: kokos
          SLACK_ICON_EMOJI: ':scream_cat:'

      - name: Notify Slack - Failure (staging)
        if: ${{ env.CI_SKIP == 'false' && failure() && github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'deploy prod') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: '#ff0033'
          SLACK_TITLE: Deployment failed AWV app - STAGING
          SLACK_MESSAGE: ðŸ’£
          SLACK_USERNAME: kokos
          SLACK_ICON_EMOJI: ':scream_cat:'

      - name: Notify Slack - Failure (review)
        if: ${{ env.CI_SKIP == 'false' && failure() && startsWith(github.event.head_commit.message, 'deploy review') }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: '#ff0033'
          SLACK_TITLE: Deployment failed for AWV app - REVIEW APP (${{ steps.split.outputs._2 }})
          SLACK_MESSAGE: ðŸ’£
          SLACK_USERNAME: kokos
          SLACK_ICON_EMOJI: ':scream_cat:'

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: ${{ env.CI_SKIP == 'false' && failure()  }}
        with:
          name: Logs
          path: ./storage/logs
